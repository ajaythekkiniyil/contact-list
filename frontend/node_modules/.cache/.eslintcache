[{"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\index.js":"1","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\App.js":"2","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\Contact.js":"3","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\const.js":"4","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\ReadOnlyRow.js":"5","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\EditableRow.js":"6"},{"size":230,"mtime":1681465066202,"results":"7","hashOfConfig":"8"},{"size":169,"mtime":1681394348835,"results":"9","hashOfConfig":"8"},{"size":10073,"mtime":1681639698712,"results":"10","hashOfConfig":"8"},{"size":75,"mtime":1680539543721,"results":"11","hashOfConfig":"8"},{"size":782,"mtime":1681577556834,"results":"12","hashOfConfig":"8"},{"size":1805,"mtime":1681577726006,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c2wxq2",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\index.js",[],[],"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\App.js",[],[],"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\Contact.js",["34","35"],[],"import React, { Fragment, useEffect, useState } from 'react'\r\nimport CreateOutlinedIcon from '@mui/icons-material/CreateOutlined'\r\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined'\r\nimport axios from 'axios'\r\nimport backendUrl from '../../const'\r\nimport ReadOnlyRow from './ReadOnlyRow'\r\nimport EditableRow from './EditableRow'\r\n\r\nfunction Contact() {\r\n    const [contacts, setContacts] = useState([])\r\n    const [searchKey, setSearchKey] = useState('')\r\n\r\n    // used to store form values initially \r\n    const [addFormData, setAddFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n    })\r\n    // used to store form values while editing contact informations\r\n    const [editedFormData, setEditedFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n    })\r\n    const [editRowId, setEditRowId] = useState(null)\r\n\r\n\r\n    // api call to backend and store to contact state\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            await axios.get(`${backendUrl}/contacts`)\r\n                .then(resp => {\r\n                    setContacts(resp.data)\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n        }\r\n        fetchData()\r\n    }, [contacts])\r\n\r\n    // function for handling input change and storing new contact to state(addFormData)\r\n    const handleAddFormChange = (event) => {\r\n        event.preventDefault()\r\n\r\n        const fieldName = event.target.getAttribute('name')\r\n        const fieldValue = event.target.value\r\n\r\n        // create new object and new key-value\r\n        const newFormData = { ...addFormData }\r\n        newFormData[fieldName] = fieldValue\r\n\r\n        setAddFormData(newFormData)\r\n    }\r\n\r\n    // onSubmiting form newContact object created and store all contacts (new + old)\r\n    // then store to database also\r\n    const handleAddFormSubmit = (event) => {\r\n        event.preventDefault()\r\n\r\n        const newContact = {\r\n            name: addFormData.name,\r\n            email: addFormData.email,\r\n            phone: addFormData.phone,\r\n        }\r\n\r\n        const newContacts = [...contacts, newContact]\r\n\r\n        // store new contact to database\r\n        const storeToDb = async () => {\r\n            await axios.post(`${backendUrl}/create`, newContact)\r\n                .then(resp => {\r\n                    // alert('contact saved')\r\n                    setContacts(newContacts)\r\n                    // clearing input fields on submit\r\n                    var form = document.getElementById(\"myForm\");\r\n                    form.reset();\r\n                })\r\n                .catch(err => alert('Duplicate contact not allowed!'))\r\n        }\r\n        storeToDb()\r\n    }\r\n\r\n    // function handle delete contact \r\n    const handleDelete = (id) => {\r\n        const isDelete = window.confirm(\"Do you want to delete\")\r\n        if (isDelete) {\r\n            async function deleteContact() {\r\n                await axios.delete(`${backendUrl}/contact/${id}`)\r\n                    .then(resp => {\r\n                        setContacts(contacts.filter(contact => contact._id !== id))\r\n                    })\r\n                    .catch(err => console.log(err))\r\n            }\r\n            deleteContact()\r\n        }\r\n    }\r\n\r\n    // this function set editRowId if edit button cliked\r\n    const handleEditRowId = (event, id, contact) => {\r\n        event.preventDefault()\r\n        setEditRowId(id)\r\n        const formValues = {\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone,\r\n        }\r\n        setEditedFormData(formValues)\r\n    }\r\n\r\n    // edited form data storing to new state\r\n    const handleEditFormChange = (event) => {\r\n        event.preventDefault()\r\n        const { name, value } = event.target\r\n        setEditedFormData((prevs) => (\r\n            {\r\n                ...prevs,\r\n                [name]: value,\r\n            }\r\n        ))\r\n    }\r\n\r\n    // save or update contact into db onclick save button and also updated contact(state) so it is immediately visible to UI \r\n    const saveEditedContact = (event) => {\r\n        event.preventDefault()\r\n        const editedNewContact = {\r\n            _id: editRowId,\r\n            name: editedFormData.name,\r\n            email: editedFormData.email,\r\n            phone: editedFormData.phone,\r\n        }\r\n\r\n        const newContacts = { ...contacts }\r\n        const index = contacts.findIndex((contact) => contact._id === editRowId)\r\n\r\n        newContacts[index] = editedNewContact\r\n        setEditRowId(null)\r\n\r\n        // updating database\r\n        axios.put(`${backendUrl}/contact/${editRowId}`, editedFormData)\r\n            .then(resp => console.log('contact updated'))\r\n            .catch(err => alert(err))\r\n    }\r\n\r\n    // store filtered values based on searchKey\r\n    const searchedElements = contacts.filter(contact => contact.name.includes(searchKey))\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"contact-list-outer-box\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-8\">\r\n                            <h3 className=\"title\">Contact List</h3>\r\n                        </div>\r\n                        <div className=\"search-box col-4\">\r\n                            <div className=\"col-lg-12\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder='Search...'\r\n                                    value={searchKey}\r\n                                    onChange={(event) => setSearchKey(event.target.value)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-12 mt-4\">\r\n                            <h5>Add new contact</h5>\r\n                            {/* form for creating new contacts */}\r\n                            <form id=\"myForm\" className='add-contact-form' onSubmit={handleAddFormSubmit}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    name='name'\r\n                                    placeholder='Name'\r\n                                    required\r\n                                    onChange={handleAddFormChange}\r\n                                />\r\n                                <input\r\n                                    type=\"email\"\r\n                                    name='email'\r\n                                    placeholder='Email'\r\n                                    required\r\n                                    onChange={handleAddFormChange}\r\n                                />\r\n                                <input\r\n                                    type=\"tel\"\r\n                                    name='phone'\r\n                                    placeholder='Phone'\r\n                                    pattern=\"{10}-[0-9]\"\r\n                                    required\r\n                                    onChange={handleAddFormChange}\r\n                                />\r\n                                <button type=\"submit\" className='add-new'>Add new contact</button>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"col-12 p-2 table-responsive mt-4\">\r\n                            <form>\r\n                                <table className='table table-bordered'>\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th>Name</th>\r\n                                            <th>Email</th>\r\n                                            <th>Phone</th>\r\n                                            <th>Actions</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {/* map through contacts to display to ui */}\r\n                                        {\r\n                                            searchKey \r\n                                            ?\r\n                                            searchedElements.map(eachContact=> (\r\n                                                <ReadOnlyRow contact={eachContact} handleDelete={handleDelete} handleEditRowId={handleEditRowId}/>\r\n                                            ))\r\n                                            :\r\n                                            contacts.map(contact => (\r\n                                                <Fragment key={contact._id}>\r\n                                                    {\r\n                                                        editRowId === contact._id ?\r\n                                                            <EditableRow\r\n                                                                handleEditFormChange={handleEditFormChange}\r\n                                                                editedFormData={editedFormData}\r\n                                                                saveEditedContact={saveEditedContact}\r\n                                                                setEditRowId={setEditRowId}\r\n                                                            />\r\n                                                            :\r\n                                                            <ReadOnlyRow contact={contact} handleDelete={handleDelete} handleEditRowId={handleEditRowId} />\r\n                                                    }\r\n                                                </Fragment>\r\n                                            ))\r\n                                        }\r\n                                    </tbody>\r\n                                </table>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\const.js",[],[],[],"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\ReadOnlyRow.js",[],[],"C:\\Ajay\\MERN stack\\contact-list\\frontend\\src\\components\\Contact\\EditableRow.js",[],[],{"ruleId":"36","severity":1,"message":"37","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":26},{"ruleId":"36","severity":1,"message":"40","line":3,"column":8,"nodeType":"38","messageId":"39","endLine":3,"endColumn":33},"no-unused-vars","'CreateOutlinedIcon' is defined but never used.","Identifier","unusedVar","'DeleteOutlineOutlinedIcon' is defined but never used."]